//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2025. 04. 24. 20:39:44
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;

namespace Telefonkonyv
{

    public partial class cnTelefonkonyv : DbContext
    {

        public cnTelefonkonyv() :
            base()
        {
            OnCreated();
        }

        public cnTelefonkonyv(DbContextOptions<cnTelefonkonyv> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                var builder = new ConfigurationBuilder()
                    .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
                    .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true);

                IConfiguration config = builder.Build();

                string connStr = config.GetConnectionString("csKapcsolat");
                optionsBuilder.UseSqlServer(connStr);
            }
            Console.WriteLine("Connection string successfully read and set.");

        }

        private static string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);
            var configuration = configurationBuilder.Build();
            return configuration.GetConnectionString(connectionStringName);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Szemely> Személyek
        {
            get;
            set;
        }

        public virtual DbSet<Helyseg> Helységek
        {
            get;
            set;
        }

        public virtual DbSet<Szam> Számok
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.SzemelyMapping(modelBuilder);
            this.CustomizeSzemelyMapping(modelBuilder);

            this.HelysegMapping(modelBuilder);
            this.CustomizeHelysegMapping(modelBuilder);

            this.SzamMapping(modelBuilder);
            this.CustomizeSzamMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Szemely Mapping

        private void SzemelyMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Szemely>().ToTable(@"Szemelyek");
            modelBuilder.Entity<Szemely>().Property(x => x.SzemélyId).HasColumnName(@"SzemélyId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Szemely>().Property(x => x.Név).HasColumnName(@"Név").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Szemely>().Property(x => x.Cím).HasColumnName(@"Cím").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Szemely>().Property(x => x.HelységId).HasColumnName(@"HelységId").ValueGeneratedNever();
            modelBuilder.Entity<Szemely>().HasKey(@"SzemélyId");
        }

        partial void CustomizeSzemelyMapping(ModelBuilder modelBuilder);

        #endregion

        #region Helyseg Mapping

        private void HelysegMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Helyseg>().ToTable(@"Helysegek");
            modelBuilder.Entity<Helyseg>().Property(x => x.HelységId).HasColumnName(@"HelységId").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Helyseg>().Property(x => x.Irányítószám).HasColumnName(@"Irányítószám").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Helyseg>().Property(x => x.Név).HasColumnName(@"Név").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Helyseg>().HasKey(@"HelységId");
        }

        partial void CustomizeHelysegMapping(ModelBuilder modelBuilder);

        #endregion

        #region Szam Mapping

        private void SzamMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Szam>().ToTable(@"Szamok");
            modelBuilder.Entity<Szam>().Property(x => x.SzámId).HasColumnName(@"SzámId").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Szam>().Property(x => x.SzámSztring).HasColumnName(@"SzámSztring").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Szam>().HasKey(@"SzámId");
        }

        partial void CustomizeSzamMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Szemely>().HasOne(x => x.Helység).WithMany(op => op.Személyek).HasForeignKey(@"HelységId").IsRequired(false);
            modelBuilder.Entity<Szemely>().HasMany(x => x.Számok).WithMany(op => op.Személyek);

            modelBuilder.Entity<Helyseg>().HasMany(x => x.Személyek).WithOne(op => op.Helység).HasForeignKey(@"HelységId").IsRequired(false);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
